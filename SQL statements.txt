In SQL table is similar to a sheet in excel.

Note- SQL statements need not be uppercase, but it is convention followed for better readability.

SQL statements-

1) SELECT- Is used to select a column or group of column from the specified table.

	Syntax-> SELECT <COLUMNS> FROM table
	Example-> SELECT first_name,last_name FROM customer;
		  SELECT * FROM customer

2) SELECT DISTINCT-> Similar to the SELECT statement, but it only disaplys the distinct elements in the column.
	
	Example-> SELECT DISTINCT rating FROM film;

3) SELECT COUNT -> Count the number of rows in the column.

	Syntax-> SELECT COUNT (<column>) FROM table ->-> Here () is necessary as the data in the paranthesis is treated as input to COUNT
	Example-> SELECT COUNT (amount) FROM payment;
	
	To count number of distinct elements in the column
	Example-> SELECT COUNT (DISTINCT(amount)) FROM payment;

4) SELECT WHERE -> After selecting the columns, apply the condition to fetch particular entries from the columns.

	Syntax-> SELECT <cloumn name/s> FROM table WHERE <some condition>;
	1. Example -> SELECT name,choice FROM customer WHERE name='Avinash' AND choice='A'
	2. Example -> SELCT * FROM film WHERE rental_rate > 4 AND replacement_cost > 5 AND rating = 'U'
	3. Example-> to count occurence -> SELCT COUNT(*) FROM film WHERE rental_rate > 4 AND replacement_cost > 5 AND rating = 'U'

Note-> 1) In SQL strings are enclosed in single quotes ''
       2) Different operators are-
		a) =  equal (not == it is just =)
		b) >, <, >=, <= and != (or even <>) are self explanatory.
       3) AND, OR and NOT are logical operators.
       4) WHERE can be applied on the column that is not part of the SELECT's column list.
	   Example- SELECT first_name FROM customer
		    WHERE customer_id>5

5) ORDER BY -> Is used to group- in either ascending or descending order- the selected columns. The columns of string type are grouped alphabetically. 
	
	Syntax-> SELECT <column/s> FROM table 
		 ORDER BY <column_name> <ASC/DESC>, <column_name2> <ASC/DESC>;
		
Note->  1) By default, the order is ascending.
	2) When multiple columns are specified after ORDER, the ordering is applied starting from left to right i.e the ordering of the right columns are applied on the result of columns starting from left.
	3) The ORDER BY can be applied on the column that is not present in the SELCET's columns name.
		Example-> SELECT first_name FROM customer
		          ORDER BY customer_id DESC

	1. Example-> SELECT first_name,last_name,store_id FROM customer
		     ORDER BY stored_id ASC, first_name ASC;
	   Here stored id will repeat from different customer like 1,1,2,2,2,3,4,2 and so on. This query first orders stored id and then applies first_name ordering on the ordered store_id.

6) LIMIT -> Is used to limit the number of rows in the selected columns.

	Syntax-> SELCT <column/s> FROM table LIMIT <req. number of columns>
	Example-> SELECT first_name FROM customer
		  WHERE transaction_cost>5
		  ORDER BY transaction_cost DSC
                  LIMIT 5;

Note-> ORDER BY can't be put before WERE statements.
	SELECT * FROM customer			SELECT * FROM customer_id
	ORDER BY customer_id			WHERE customer_id > 5
	WHERE customer_id>5;			ORDER BY customer_id ASC;

	This is wrong				This is correct.

7) BETWEEN -> Is used to select values between provided limit (limits inclusive)

	Syntax-> SELECT <column/s> FROM table
		 WHERE <column> BETWEEN <lower limit> AND <upper limit>

		This is lower_limit <= <column> <= upper_limit
	
		WHERE <column> NOT BETWEEN <lower limit> AND <upper limit> is opposite of above.

	Exmaple-> SELECT * from film
		  WHERE rating BETWEEN 4 AND 5;

Note-> * While BETWEEN is applied to timestamp, only the 0th hour of upper limit is conisdered.
	Eg-> Assume there is a transaction on 2022-07-06 13:00
	     If the query used is BETWEEN 2022-07-04 AND 2022-07-06 then above transaction won't be counted as it on some time above 0:00. So, be bit careful.

8) IN -> Can be used to select group of values in the column instead of using chaing of OR values.

	Syntax-> SELECT <column/s> FROM table
		 WHERE <column> IN (req value 1, req value2.. and so on)

	Example-> SELECT * FROM film
	          WHERE series IN ('Flash','Sherlock Holmes','Prison Break')

9) LIKE and ILIKE -> These are used for pattern matching. LIKE is case-sensitive and ILIKE is case-insensitive.

		% -> meaning can be filled by group of characters or even no character.
	          
		Example -> %NASH% -> means all those names having NASH in them. eg-> AVINASH, NASH, NASHAA, AANASH
 
 		_ -> menaing only one character.

		Example -> _ASH -> means only one character allowed before ASH. eg-> NASH, AASH

	Syntax-> SELECT <column/s> FROM table
		 WHERE <column> LIKE/ILIKE '%ASH_'

	Example-> SELECT * FROM film
		  WHERE first_name ILIKE 'J%' AND last_name LIKE '%JOS_'


10) Commonly used aggregate functions-

	1) AVG() 2) COUNT() 3) MAX() 4) MIN() 5)SUM()

Note:   1) The above fuctions needs to be used with SELECT statement.
 	2) The AVG and SUM returns long decimal values. ROUND() has to be used.

	Example- SELECT ROUND(AVG(cost)),MAX(ID) FROM film;

11) GROUP BY- Is used to same similar categorical data. This statement has to be applied only on the categorical column/s. 
              The categorical columns can be either numbers or even strings or alphanumeric values.
	      They have to be used either after FROM or after WHERE. Also, some aggregate functions has to be used before FROM.

		Syntax- SELECT <column a>, Aggregate_func(column b)
			FROM <table_name>
			GROUP BY <column a>

			or 

			SELECT <column a>, Aggregate_func(column b)
			FROM <table_name>
			WHERE <column a>
			GROUP BY <column a>

Note- The column should be same in SELECT and GROUP BY. The aggregate and SELECT shouldn't be applied on same column.

		Exmaple- SELECT company,SUM(sales)
			 FROM finance_table
			 GROUP BY company


			 SELECT company,division,SUM(sales)
			 FROM finance_table
		         WHERE division IN ('marketing','transport')
			 GROUP BY company,division

			 SELECT company,SUM(sales)
			 FROM finance_table
			 GROUP BY company
			 ORDER BY SUM(sales) -> when ORDER BY is used, it is mandatory to use aggregate function when GROUP BY is used.

		Exercise- There are two staffs with ID 1 and 2. What is the total number of payments handled by them. How many payments did each staff handle?
		Solution- SELECT staff_id,COUNT(payment_id)
			  FROM payment
                          GROUP BY staff_id;

		Exercise- Find the average replacement cost for different movie rating.
		Solution- SELECT rating,ROUND(AVG(replacement_cost),2)
			  from film
			  GROUP BY rating

		Exercise- Find the top5 customers by amount spent
		Solution- SELECT customer_id,SUM(amount)
			  FROM payment
			  GROUP BY customer_id
			  ORDER BY SUM(amount)DESC
			  LIMIT 5